Types Of Atomic Operations:
===========================

Atomic fetch and operation functions
------------------------------------
        1. type __sync_fetch_and_add (type *ptr, type v, ...)
        2. type __sync_fetch_and_sub (type *ptr, type v, ...)
        3. type __sync_fetch_and_or (type *ptr, type v, ...)
        4. type __sync_fetch_and_and (type *ptr, type value, ...)
        5. type __sync_fetch_and_xor (type *ptr, type value, ...)
	6. type __sync_fetch_and_nand (type *ptr, type value, ...)

        All above functions return the value that had previously been in memory
        before performing the suggested operations.


Atomic operation and fetch functions
------------------------------------
        1. type __sync_add_and_fetch (type *ptr, type value, ...)
        2. type __sync_sub_and_fetch (type *ptr, type value, ...)
        3. type __sync_or_and_fetch (type *ptr, type value, ...)
        4. type __sync_and_and_fetch (type *ptr, type value, ...)
        5. type __sync_xor_and_fetch (type *ptr, type value, ...)
        6. type __sync_nand_and_fetch (type *ptr, type value, ...)

        All above functions return the new value in memory after performing
        the suggested operations.

Atomic Comparisions
-------------------
	1. bool __sync_bool_compare_and_swap (type *ptr, type oldval type newval, ...)
	2. type __sync_val_compare_and_swap (type *ptr, type oldval type newval, ...)
    
	These builtins perform an atomic compare and swap. That is, if the current value of *ptr is oldval, 
	then write newval into *ptr.

    	The “bool” version returns true if the comparison is successful and newval was written. 
	The “val” version returns the contents of *ptr before the operation.

Atomic Barriers:
----------------
	__sync_synchronize (...)
	This builtin issues a full memory barrier.

Atomic lockings:
----------------
	Locking:
	--------
	type __sync_lock_test_and_set (type *ptr, type value, ...)
    	
	This builtin, as described by Intel, is not a traditional test-and-set operation, but 
	rather an atomic exchange operation. It writes value into *ptr, and returns the previous contents of *ptr.

    	Many targets have only minimal support for such locks, and do not support a full exchange operation. 
	In this case, a target may support reduced functionality here by which the only valid value to store 
	is the immediate constant 1. The exact value actually stored in *ptr is implementation defined.

	This builtin is not a full barrier, but rather an acquire barrier. This means that references after 
	the builtin cannot move to (or be speculated to) before the builtin, but previous memory stores 
	may not be globally visible yet, and previous memory loads may not yet be satisfied.

	Unlocking:
	----------
	void __sync_lock_release (type *ptr, ...)

	This builtin releases the lock acquired by __sync_lock_test_and_set. 
	Normally this means writing the constant 0 to *ptr.

	This builtin is not a full barrier, but rather a release barrier. This means that all previous 
	memory stores are globally visible, and all previous memory loads have been satisfied, 
	but following memory reads are not prevented from being speculated to before the barrier. 



Software lock operations using atomic instructions:
===================================================

typedef struct {
	int lck;
	wait_queue_t queue;
}sem_t;


int poll_lock(sem_t *lock)
{
	while (lock->lck!= 0);
	__sync_add_and_fetch(lock->lck, 1);
	return 0;
}	

int poll_unlock(sem_t *lock)
{
        __sync_sub_and_fetch(lock->lck, 1);
        return 0;
}



sem_t sem;
main()
{
	lock(&sem);
		/* code to access shared data */
	unlock(&sem);
}
Mutual exclusion framework implementations

1. wait locks ( semaphore, mutex)
2. Poll locks ( spinlock)

